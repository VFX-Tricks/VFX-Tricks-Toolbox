<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="VFXTricksDev" label="VFX Tricks Dev">
    <memberTool name="Publish Tools"/>
    <memberTool name="Publish Hip File"/>
    <memberTool name="Publish Sticky Info"/>
    <memberTool name="test"/>
    <memberTool name="Turntable Submitter"/>
  </toolshelf>

  <tool name="Publish Sticky Info" label="Publish Sticky Info" icon="hicon:/SVGIcons.index?BUTTONS_external_editor.svg">
    <script scriptType="python"><![CDATA[import hou

obj = hou.node('/obj')
out = hou.node('/out')

sticky = obj.findStickyNote('info')

# check if sticky exists
if sticky == None:
    sticky = obj.createStickyNote('info')
    
# houdini
houdini_ver = hou.applicationVersionString()


# arnold
rop = out.createNode('arnold')
type = rop.type()
definition = type.definition()
file = definition.libraryFilePath()
idx = file.index('htoa-')
arnold_ver = file[idx + 5:idx+12]
rop.destroy()


# redshift
redshift_ver = str(hou.hscript("Redshift_version")[0]).strip()


# 3delight
delight_ver = '2.6.4'


# Renderman
renderman_ver = '24.1'


# write sticky note

text = []
text.append('Scene tested and developed on:')
text.append('')
text.append('Houdini %s' % houdini_ver)
text.append('')
text.append('Arnold %s' % arnold_ver)
text.append('Redshift %s' % redshift_ver)
text.append('3delight %s' % delight_ver)
text.append('Renderman %s' % renderman_ver)

text = '\n'.join(text)

sticky.setText(text)]]></script>
  </tool>

  <tool name="Publish Hip File" label="Publish Hip File" icon="hicon:/SVGIcons.index?BUTTONS_list_add.svg">
    <script scriptType="python"><![CDATA[import hou
import os
import sys
import shutil
import nodesearch
import pprint
import subprocess


job = hou.getenv('JOB')
delete_nodes_script = ' C:/Work/VFXTricks/Tools/VFXTricksTools/deleteNodes.py'

if os.name != 'nt':
    delete_nodes_script = '/mnt/Windows/Work/VFXTricks/Tools/VFXTricksTools/deleteNodes.py'
    job = job.replace('E:', '/mnt/Storage')
    
    
deadline_folder = os.path.join(job, 'houdini/deadline')
if not os.path.exists(deadline_folder):
    os.makedirs(deadline_folder)
    
args_file = os.path.join(deadline_folder, 'args.txt')
publish_root_folder = os.path.join(job, 'publish')
project_name = job.split('/')[-1]
project_name = job.split('_')[-1]


renderers = ['karma', 'arnold', 'redshift', 'delight', 'renderman']
networks = ['/obj', '/out', '/mat', '/stage', '/ch', '/img', '/shop', '/tasks']

delete_dict = {}
matcher = nodesearch.All()   

def createNewVersion():
    if not os.path.isdir(publish_root_folder):
        os.mkdir(publish_root_folder)
        
    versions = os.listdir(publish_root_folder)
    new_ver = len(versions) + 1
    new_ver_folder = os.path.join(publish_root_folder, 'v' + str('%03d' % new_ver))
    
    os.mkdir(new_ver_folder)
    hou.hipFile.save()
    
    hipfile = hou.hipFile.path()
    
    for render in renderers:
        hipfile_dst = os.path.join(new_ver_folder, project_name + '_' + render + '.hip')
        shutil.copy(hipfile, hipfile_dst)
    
    return new_ver, new_ver_folder

def prep_deadline():
    # delete files in deadline folder
    if os.path.exists(deadline_folder):
        shutil.rmtree(deadline_folder)
        os.makedirs(deadline_folder)
    else:
        os.makedirs(deadline_folder)

    # args file
    args = []
    args.append('-SubmitMultipleJobs')

    f = open(args_file, "w")
    f.write('\n'.join(args))
    f.close()
    
def writeSubmissionFiles(render, filepath):

    # job file
    job_info_file = os.path.join(deadline_folder, render + '_info.txt')
    job_info = []
    job_info.append('Plugin=CommandLine')
    job_info.append('Frames=1-1')
    job_info.append('Name=%s' % project_name + '_' + render)
    job_info.append('BatchName=%s' % project_name + '_Publishing')

    
    f = open(job_info_file, "w")
    f.write('\n'.join(job_info))
    f.close()
    
    
    # plugin file
    job_plugin_file = os.path.join(deadline_folder, render + '_plugin.txt')
    job_plugin = []
    if os.name == 'nt':
        job_plugin.append('Executable=hython.exe')
    else:
        hfs = hou.getenv('HFS')
        if hfs:
            hython_bin = hfs + '/bin/hython'
            job_plugin.append('Executable=%s' % hython_bin)
        else:
            hou.ui.displayMessage("$HFS variable is not set. It's required for running Husk command.")
            raise

        
    command = []
    command.append(delete_nodes_script)
    command.append(render)
    command.append(filepath)
    command = ' '.join(command)
    
    job_plugin.append('Arguments=%s' % command)
            
    f = open(job_plugin_file, "w")
    f.write('\n'.join(job_plugin))
    f.close()
    
    # appends args file
    f = open(args_file, "a")
    f.write('\n' + '-job')
    f.write('\n' + job_info_file)
    f.write('\n' + job_plugin_file)
    f.close()
    
def send_deadline(hideWindow=True, readStdout=True):
    deadlineBin = os.environ['DEADLINE_PATH']
    deadlineCommand = os.path.join(deadlineBin, "deadlinecommand")
    
    args_file = os.path.join(deadline_folder, 'args.txt')
    
    startupinfo = None
    creationflags = 0
    if os.name == 'nt':
        if hideWindow:
            # Python 2.6 has subprocess.STARTF_USESHOWWINDOW, and Python 2.7 has subprocess._subprocess.STARTF_USESHOWWINDOW, so check for both.
            if hasattr( subprocess, '_subprocess' ) and hasattr( subprocess._subprocess, 'STARTF_USESHOWWINDOW' ):
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess._subprocess.STARTF_USESHOWWINDOW
            elif hasattr( subprocess, 'STARTF_USESHOWWINDOW' ):
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        else:
            # still show top-level windows, but don't show a console window
            CREATE_NO_WINDOW = 0x08000000   #MSDN process creation flag
            creationflags = CREATE_NO_WINDOW

    arguments = [deadlineCommand, args_file]

    # Specifying PIPE for all handles to workaround a Python bug on Windows. The unused handles are then closed immediately afterwards.
    proc = subprocess.Popen(arguments, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo, creationflags=creationflags)

    output = ""
    if readStdout:
        output, errors = proc.communicate()

    if sys.version_info[0] > 2 and type(output) == bytes:
        output = output.decode()
    
    print(output)
    return output


#new_ver, new_ver_folder = createNewVersion()

#prep_deadline()
#for render in renderers:
#    hipfile = os.path.join(new_ver_folder, project_name + '_' + render + '.hip')
#    writeSubmissionFiles(render, hipfile)
#send_deadline()]]></script>
  </tool>

  <tool name="Publish Tools" label="Publish Tools" icon="hicon:/SVGIcons.index?BUTTONS_light_include.svg">
    <script scriptType="python"><![CDATA[import os
import shutil
import time
from distutils.dir_util import copy_tree

if os.name == 'nt':
    publish_root_folder = 'F:\\VFXTricks\\VFXTricksTools\\packages'
    template_folder = 'F:\\VFXTricks\\VFXTricksTools\\template'
    deadline_plugin_folder = 'C:/DeadlineRepository10/custom/plugins'
    houdini_packages_folder = 'C:/Users/Tas/Documents/houdini19.0/packages'
    ue_tools_folder = 'C:/Work/VFXTricks/Tools/UnrealEngine'
else:
    publish_root_folder = '/mnt/Storage/VFXTricks/VFXTricksTools/packages'
    template_folder = '/mnt/Storage/VFXTricks/VFXTricksTools/template'
    deadline_plugin_folder = '/mnt/Windows/DeadlineRepository10/custom/plugins'
    houdini_packages_folder = '/home/tas/houdini19.0/packages'
    ue_tools_folder = '/mnt/Windows/Work/VFXTricks/Tools/UnrealEngine'
    
def getToolSubmenu(hda_def):
    import xml.etree.ElementTree as ET
    if hda_def.hasSection('Tools.shelf'):
        sections = hda_def.sections()       
        ts_section = sections['Tools.shelf'].contents()   
       
        root = ET.fromstring(ts_section)    
        tool = root[0]    
        submenus = tool.findall('toolSubmenu')        
        if submenus:   
            tool_submenus = []
            for submenu in submenus:
                tool_submenus.append(submenu.text)
            return tool_submenus
        else:
            return None
    else:
        return None

def getAllToolSubmenus():
    categories = hou.nodeTypeCategories().values()
    types = []
    
    for category in categories:
        for node_type in category.nodeTypes().values():
            for definition in node_type.allInstalledDefinitions():                    
                submenus = getToolSubmenu(definition)
                if submenus is not None:
                    if 'VFX Tricks' in submenus:
                        if type not in types:
                            types.append(node_type)       
    return types
    
def createNewVersion():
    # find next version
    versions = os.listdir(publish_root_folder)
    for i, v in enumerate(versions):
        versions[i] = int(v[1:])
        
    new_ver = max(versions) + 1
    
    # folders
    new_ver_folder = os.path.join(publish_root_folder, 'v' + str('%03d' % new_ver))
    os.mkdir(new_ver_folder)
    new_deadline_folder = os.path.join(new_ver_folder, 'DeadlineRepository10/custom/plugins')
    new_houdini_folder = os.path.join(new_ver_folder, 'houdini19.0')
    new_packages_folder = os.path.join(new_ver_folder, 'houdini19.0/packages')
    new_ue_tools_folder = os.path.join(new_ver_folder, 'UnrealEngine')
    
    # copy folders
    copy_tree(template_folder, new_ver_folder)
    copy_tree(deadline_plugin_folder, new_deadline_folder)
    copy_tree(ue_tools_folder, new_ue_tools_folder)
    copy_tree(os.path.join(houdini_packages_folder, 'VFXTricks/scripts'), os.path.join(new_packages_folder, 'VFXTricks/scripts'))

    # copy files
    shutil.copyfile(os.path.join(houdini_packages_folder, 'VFXTricks.json'), os.path.join(new_packages_folder, 'VFXTricks.json'))
    shutil.copyfile(os.path.join(houdini_packages_folder, 'VFXTricks/toolbar/VFXTricks.shelf'), os.path.join(new_packages_folder, 'VFXTricks/toolbar/VFXTricks.shelf'))
    
    return new_ver, new_ver_folder
    
new_ver, new_ver_folder = createNewVersion()

hdas = getAllToolSubmenus()
for hda in hdas:
    print(hda.name())
    category = hda.category().name()
    definition = hda.definition()
    hda_name = hda.name()
    
    hda_file_path = definition.libraryFilePath()
    hda_file_name = hda_file_path.split('/')[-1]
    
    new_otls_folder = os.path.join(new_ver_folder, 'houdini19.0/packages/VFXTricks/otls')
    new_otl_filepath = os.path.join(new_otls_folder, hda_file_name)
    new_otl_filepath += 'lc'
    
    context = None
    if category == 'Object':
        parent = hou.node('obj')
    elif category == 'Driver':
        parent = hou.node('out')
    elif category == 'Sop':
        context = hou.node('obj')
        parent = context.createNode('geo')
    elif category == 'Lop':
        parent = hou.node('stage')
    else:
        print('missing category')
    
    node = parent.createNode(hda.name())
    type = node.type()
    definition = type.definition()
    
    node.allowEditingOfContents(True)
    
    definition.setVersion(str(new_ver))
    definition.save(new_otl_filepath, node)
    
#    node.destroy()
#    try:
#        parent.destroy()
#    except:
#        pass

# zip files
zip_temp_file = os.path.join(publish_root_folder, 'VFXTricksTools_v' + str('%03d' % new_ver))
zip_file = os.path.join(new_ver_folder, 'VFXTricksTools_v' + str('%03d' % new_ver))
shutil.make_archive(zip_temp_file, 'zip', new_ver_folder)

# copy zip file to new version folder
shutil.move(zip_temp_file + '.zip', zip_file + '.zip')]]></script>
  </tool>

  <tool name="Turntable Submitter" label="Turntable Submitter" icon="hicon:/SVGIcons.index?DATATYPES_matrix3.svg">
    <script scriptType="python"><![CDATA[selected_nodes = hou.selectedNodes()
cam_parent_node = hou.node('/obj/cam_parent')

for node in selected_nodes:
    type = node.type()
    if type.nameComponents()[2] == 'farmsubmitter':
        print('submitting ' + node.name())
        start_parm = cam_parent_node.parm('rotx')
        start = start_parm.eval()
        end_parm = cam_parent_node.parm('roty')
        end = end_parm.eval()
        
        submit_btn = node.parm('submit')
        
        for i in range(start, end):
            print(i)
            start_parm.set(i)
            submit_btn.pressButton()
            
        start_parm.set(start)]]></script>
  </tool>
</shelfDocument>
